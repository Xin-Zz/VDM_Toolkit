module TestV2IFcns
exports all
definitions

functions
/*
	-- constant function with undeclared specification
	const: () -> nat
	const() == 10;

	-- constant function with declared specification
	constS: () -> nat
	constS() == 10
	pre 10 > 5
	post RESULT > 0;

	-- "normal" function with undeclared specification
	f: nat * nat1 -> nat1
	f(x, y) == x + y;

*/

	-- "normal" function with declared specification
	g: nat * nat1 -> nat1
	g(x, y) == x + y
	pre x > 10 
	post x < RESULT;

	-- "normal" function with declared specification and pre/post references
	h: nat -> nat
	h(x) == g(x, x)
	pre pre_g(x, x) 
	post post_g(x, x, RESULT) ;

	-- "normal" function with declared specification without pre/post references
	h': nat -> nat
	h'(x) == g(x, x)
	pre x < 20
	post x > 20;

	-- "normal" function with declared specification without pre/post references
	h'': nat -> nat
	h''(x) == g(x, x)
	pre x < 20
	post pre_g(x,RESULT) ;

/*
	-- curried function with undeclared specification	
	curried: nat -> nat -> nat
	curried(x)(y) == x + y;

	-- curried function with declared specification	
	curriedS: nat -> nat -> nat
	curriedS(x)(y) == x + y
	pre x > y
	post x < RESULT and y < RESULT;

	implicit(x, y: nat, z: set of nat) r: seq of nat 
	pre x < y and x in set z
	post x > len r;

	implicitexplicit(x, y: nat, z: set of nat) r: seq of nat 
		== [x,y]
	pre x < y and x in set z
	post x > len r;
*/
end TestV2IFcns

/*
Proof Obligation 1: (Unproved)
g: post condition obligation in 'TestV2IFcns' (TestV2IFcns.vdmsl) at line 24:5
(forall x:nat, y:nat1 & pre_g(x, y) => post_g(x, y, (x + y)))

Proof Obligation 3: (Unproved)
h: post condition obligation in 'TestV2IFcns' (TestV2IFcns.vdmsl) at line 30:5
(forall x:nat &  pre_h(x) => post_h(x, g(x, x)))

Proof Obligation 5: (Unproved)
h: subtype obligation in 'TestV2IFcns' (TestV2IFcns.vdmsl) at line 33:23
(forall x:nat &  ((pre_g(x, x) and (x < 20)) => let RESULT:nat = g(x, x) in RESULT > 0))

Proof Obligation 6: (Unproved)
h: function apply obligation in 'TestV2IFcns' (TestV2IFcns.vdmsl) at line 31:13
(forall x:nat & (pre_g(x, x) and (x < 20)) => pre_g(x, x))

Proof Obligation 7: (Unproved)
h: subtype obligation in 'TestV2IFcns' (TestV2IFcns.vdmsl) at line 31:18
(forall x:nat & (pre_g(x, x) and (x < 20)) =>
  x > 0)

Proof Obligation 8: (Unproved)
h': post condition obligation in 'TestV2IFcns' (TestV2IFcns.vdmsl) at line 36:5
(forall x:nat &
  pre_h'(x) => post_h'(x, g(x, x)))

Proof Obligation 9: (Unproved)
h': function apply obligation in 'TestV2IFcns' (TestV2IFcns.vdmsl) at line 37:14
(forall x:nat & (x < 20) =>
  pre_g(x, x))

Proof Obligation 10: (Unproved)
h': subtype obligation in 'TestV2IFcns' (TestV2IFcns.vdmsl) at line 37:19
(forall x:nat & (x < 20) =>
  x > 0)

Proof Obligation 11: (Unproved)
h'': post condition obligation in 'TestV2IFcns' (TestV2IFcns.vdmsl) at line 42:5
(forall x:nat &
  pre_h''(x) => post_h''(x, g(x, x)))

Proof Obligation 12: (Unproved)
h'': subtype obligation in 'TestV2IFcns' (TestV2IFcns.vdmsl) at line 45:18
(forall x:nat &
  ((x < 20) => let RESULT:nat = g(x, x) in 
    RESULT > 0))

Proof Obligation 13: (Unproved)
h'': function apply obligation in 'TestV2IFcns' (TestV2IFcns.vdmsl) at line 43:15
(forall x:nat & (x < 20) =>
  pre_g(x, x))

Proof Obligation 14: (Unproved)
h'': subtype obligation in 'TestV2IFcns' (TestV2IFcns.vdmsl) at line 43:20
(forall x:nat & (x < 20) =>
  x > 0)
*/
