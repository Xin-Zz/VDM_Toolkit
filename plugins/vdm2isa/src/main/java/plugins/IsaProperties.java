package plugins;

import java.io.File;
import java.io.InputStream;

import com.fujitsu.vdmj.config.Properties;

import java.io.FileInputStream;

public class IsaProperties {

	// target isabelle version (i.e. result of "isabelle version" call)
	public static String general_isa_version; 
	// assuming max translation errors equals max type errors for now
	public static long general_max_errors;
	// strict handling of errors (e.g. print output or not etc.)
	public static boolean general_strict;	
    // whether to report or hide warnings
	public static boolean general_report_vdm_warnings;
    public static boolean general_debug;

    // accepts invariant checks over compatible/equal types as unnecessary
    public static boolean exu_linient_inv_check;
    // retypecheck after topological sort
    public static boolean exu_retypecheck;

    // determines whether to add "pre_f =>" on post condition definitions
	public static boolean vdm2isa_linient_post;
	// determines whether to print VDM comments as Isabelle comments
	public static boolean vdm2isa_print_vdm_comments;
	// determines whether to print Isabelle comments generated by translation
	public static boolean vdm2isa_print_isa_comments;
	// whether to run exu before starting
	public static boolean vdm2isa_run_exu;
	// whether to generate min/max defs from TRTypeDefinition
	public static boolean vdm2isa_translate_typedef_min_max;
	// whether to print location information per TLD
	public static boolean vdm2isa_print_locations;
	// whether to print VDM source
	public static boolean vdm2isa_print_vdm_source;
    // translate VDM values as Isabelle abbreviations.
	public static boolean vdm2isa_value_as_abbreviation; 

    // default proof strategy
    public static IsaProofStrategy isapog_defalut_strategy;
    // creates POG locale lemmas template
    public static boolean isapog_create_pog_locale_interpretation_lemmas;

    /**
	 * When the class is initialized, which uses the vdmj.properties file, and any System
	 * properties, to set the static fields above.
	 */
	public static void init()
	{
		try
		{
			java.util.Properties isa = new java.util.Properties();
			InputStream s = IsaProperties.class.getResourceAsStream("/vdmisa.properties");
			
			if (s != null)
			{
				isa.load(s);
				s.close();
			}
			
			setValues(isa);	// Even if file cannot be found
		}
		catch (Exception e)
		{
			System.err.println(e.getMessage());
		}
	}
	
	/**
	 * Initialize properties from a specific file.
	 */
	public static void init(String filename)
	{
		java.util.Properties vdmj = new java.util.Properties();

		try
		{
			File file = new File(filename);
			
			if (file.canRead())
			{
				InputStream s = new FileInputStream(file);
				vdmj.load(s);
				s.close();
			}
		}
		catch (Exception e)
		{
			System.err.println(e.getMessage());
		}
		finally
		{
			setValues(vdmj);	// Even if file cannot be read
		}
	}

	private static void setValues(java.util.Properties isa)
	{
        general_strict = get(isa, "isa.general.strict", false);
        general_max_errors = get(isa, "isa.general.max_errors", Properties.tc_max_errors > 0 ? 2 * Properties.tc_max_errors : 100);
        general_isa_version = get(isa, "isa.general.isa_version", "Isabelle2022");
        general_report_vdm_warnings = get(isa, "isa.general.report_vdm_warnings", true);
        general_debug = get(isa, "isa.general.debug", false);

        exu_linient_inv_check = get(isa, "isa.exu.linient_inv_check", true);
        exu_retypecheck = get(isa, "isa.exu.retypecheck", false);

        vdm2isa_linient_post 	= get(isa, "isa.vdm2isa.linient_post", false);
		vdm2isa_print_vdm_comments = get(isa, "isa.vdm2isa.print_vdm_comments", true);
		vdm2isa_print_isa_comments = get(isa, "isa.vdm2isa.print_isa_comments", true);
		vdm2isa_run_exu			= get(isa, "isa.vdm2isa.run_exu", true);
		vdm2isa_value_as_abbreviation = get(isa, "isa.vdm2isa.value_as_abbreviation", true);
		vdm2isa_translate_typedef_min_max = get(isa, "isa.vdm2isa.translate_typedef_min_max", true);;
		vdm2isa_print_vdm_source = get(isa, "isa.vdm2isa.print_vdm_source", true); 
		vdm2isa_print_locations = get(isa, "isa.vdm2isa.print_locations", true);

        try 
        {
            // if properties file has invalid proof strategy, get default.
            isapog_defalut_strategy = IsaProofStrategy.valueOf(get(isa, "isa.isapog.default_strategy", IsaProofStrategy.SURRENDER.name()));
        }
        catch (IllegalArgumentException e)
        {
            isapog_defalut_strategy = IsaProofStrategy.SURRENDER;
        }
        isapog_create_pog_locale_interpretation_lemmas = get(isa, "isa.isapog.create_pog_locale_interpretation_lemmas", true);
	}
	
	private static int get(java.util.Properties local, String key, int def)
	{
		Integer value = Integer.getInteger(key);
		
		if (value == null)
		{
			if (local.containsKey(key))
			{
				try
				{
					String p = local.getProperty(key);
					value = Integer.parseInt(p);
				}
				catch (NumberFormatException e)
				{
					System.err.println(e.getMessage());
					value = def;
				}
			}
			else
			{
				value = def;
			}
		}
		
		return value;
	}
	
	private static boolean get(java.util.Properties local, String key, boolean def)
	{
		String svalue = System.getProperty(key);
		boolean value = def;
		
		if (svalue == null)
		{
			if (local.containsKey(key))
			{
				value = Boolean.parseBoolean(local.getProperty(key));
			}
		}
		else
		{
			value = Boolean.parseBoolean(svalue);
		}
		
		return value;
	}

    private static String get(java.util.Properties local, String key, String def)
	{
		String value = System.getProperty(key);
		
		if (value == null)
		{
			if (local.containsKey(key))
			{
				value = local.getProperty(key);
			}
			else
			{
				value = def;
			}
		}
		
		return value;
	}
}
