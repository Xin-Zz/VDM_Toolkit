delimiters "$", "$"

// Isabelle theory template
theory(thy) ::= <<
(* VDM to Isabelle Translation @$thy.utc$  
   Copyright 2019-22, Leo Freitas, leo.freitas@newcastle.ac.uk
   
   $thy.comment; wrap$
   $thy.location; wrap$
*)
theory $thy.name$
imports VDMToolkit $thy.imports$
begin
$thy.body$
end 
>>

// Isabelle type synonym template
typedecl(tdecl) ::= <<
$tdecl.kind$ $defineIt(listIt(tdecl.name, " "), innerSyntaxIt(tdecl.expr), true)$
>>

// This doesn't quite work. I am still not sure how parameter passing works here.
typedecl2(tdecl) ::= <<
$tdecl.kind$ $tdecl.name:listIt(" "):innerSyntaxIt(tdecl.expr):defineIt(true)$
>>

//TODO how to pass lemma list for lemma? 
lemmas(lms) ::= <<
lemmas $defineIt(lms.name, listIt(lms.lemma, " "), true)$
>>

// Isabelle abbreviation template 
// version with type:innerSyntaxIt() is confusing to me when multiple params?
abbreviation(name, type, expr) ::= <<
abbreviation 
    $name$ :: $innerSyntaxIt(type); wrap$ where
    $innerSyntaxIt(defineIt(name, expr, false)); wrap$
>> 

// Isabelle definition template 
definition(name, type, attr, expr, eq) ::= <<
definition
    $name$ :: $innerSyntaxIt(type); wrap$ where
    $attributeIt(attr, innerSyntaxIt(defineIt(name, expr, eq))); wrap$
>>

// Isabelle named claims with possible attribute 
// e.g. lemma XYZ[ATTRLIST]: EXPR; 
//TODO how to filter kind = {lemma, theorem, corollary}?
claim(kind, name, attr, expr) ::= <<
$kind$ $name$ $attribute(attr); wrap$:
    $innerSyntaxIt(expr); wrap$  
>>

// Isabelle theorem attribute for given expression, if any
// e.g. [simp, intro!]: EXPR 
listIt(l, sep=", ") ::= "$l; separator=sep$"
attribute(attr) ::= "$if(attr)$ [$listIt(attr)$] $endif$"
attributeIt(attr, expr) ::= "$if(attr)$ $attribute(attr)$: $endif$ $expr$"

// Isabelle inner syntax brackets over given expression
// e.g. \<open> EXPR \<close>
innerSyntaxIt(expr) ::= "\\<open>$expr$\\<close>"

// Isabelle named definitions as equality or equivalence 
// e.g., NAME = EXPR vs NAME == EXPR 
defineIt(name, expr, eq) ::= "$name$ $if(eq)$ = $else$ \\<equiv> $endif$ $expr$"



//TODO: how to use the :XXXX tempaltes? 
abbreviationNEW(name, type, attr, expr) ::= <<
abbreviationNEW 
    $name$ :: $type:innerSyntaxIt()$ where
    $attributeIt(attr, innerSyntaxIt(defineIt(name, expr, false)))$
>> 

