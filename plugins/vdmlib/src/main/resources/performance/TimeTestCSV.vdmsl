module TimeTestCSV
imports
    from CSV 
        functions
            freadval renamed freadval;
            flinecount renamed flinecount;  
        operations
            ferror renamed ferror;
    ,from CSVLib 
        types
            CSVType renamed CSVType;
        operations
            loadSimpleHeadersCSV renamed loadSimpleHeadersCSV;
            printCSV renamed printCSV;
    ,from IO 
        operations  
            printf renamed printf;
    ,from VDMUtil 
        functions
            val2seq_of_char renamed val2seq_of_char;
exports all
definitions
    types 
        String = seq of char;
        
        String1 = seq1 of char;
    values  
        files: set of nat = {1,100,500,1000,5000,10000,15000,20000,25000,30000,35000};
    operations 

         showError: () ==> ()
        showError() ==
        (def err: String = ferror() in
            if len err <> 0 then 
                printf("CSV error %1s", [err]);
        );

        loadCSV: String1 ==> seq of ?
        loadCSV(name) ==
        (let mk_(success', lines) = flinecount(name) in
            (dcl success: bool     := success',
                line   : nat1     := 1,
                result : seq of ? := [];
                (--showError();
                while (success and line <= lines) do
                    (let mk_(s, r) = freadval[seq of ?](name, line) in
                        (--showError();
                        success := s;
                        line    := line + 1;
                        result  := result ^ [r];
                        );
                    );
                return result;
                )
            )
        );
        loadTestCSV: (nat) ==> ()
        loadTestCSV(count) == (
            if count in set files then (
                dcl filename: String1 := val2seq_of_char[nat](count) ^ ".csv";
                --@Time("CSV %2s \n", count)
                dcl data: seq of ? := loadCSV("CSVs/" ^ filename);
                return;
            )
            else 
            (
                printf("Invalid file name: %1s",[count]);
            )
        );


        loadTestCSVLib: (nat) ==> ()
        loadTestCSVLib(count) == (
            if count in set files then (
                dcl filename: String1 := val2seq_of_char[nat](count) ^ ".csv";
                dcl headers: seq1 of CSVType := [<Integer>,<Integer>,<Integer>,<Integer> ];
                --@Time("CSVLib %2s \n", count)
                 loadSimpleHeadersCSV("performance/CSVs/" ^ filename, <Native>, headers, false);
                 --printCSV("CSVs/print_" ^ filename,0);
                return;
            )
            else 
            (
                printf("Invalid file name: %1s",[count]);
            )
        );

end TimeTestCSV