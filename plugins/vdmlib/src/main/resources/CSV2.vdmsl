module CSV2
imports from IO operations printf renamed printf;

-- 	VDM Toolkit implementation of CSV 
--  --------------------------------------------
-- File path:
--  * An absolute path is accepted and used as specified.
--  * A relative path is relative to the debugger or if running in the 
--      Overture IDE relative to the project root.
--
exports all
definitions

functions

    /**
    * Reads a seq of ? from a file in CSV format. The type which should be read must be
    * specified as freadval[seq of char](...) when calling the function. If read is successful
    * the type of @p returned is always seq of ?, where ? is any VDM type. Thus @p must always
    * be set to seq of and a type.
    *
    * @param filename the name of the file
    * @param index a index within the available lines in the file. 
    *   Valid range is between 1 and the value of <code>flinecount</code>. 
    * @return mk_(success,@p) if successful success will be 
    * set to true else false. @p will hold nil if unsuccessful or the value read.
    */
    freadval[@p]:seq1 of char * int -> bool * [@p]
    freadval(f,index) == is not yet specified;

    /**
    * Gets the number of lines in a file in CSV format.
    *
    * @param filename the name of the file
    * @return mk_(success,@p) if successful success will be 
    * set to true else false. @p will hold nil if unsuccessful.
    */
    flinecount: seq1 of char -> bool * [nat]
    flinecount(f) == is not yet specified;

operations 
    /**
    * Returns the last error which may have occurred by any of the io/out functions
    *
    * @return the last error message
    */
    ferror:() ==> seq of char
    ferror () == is not yet specified;

    --Using the CSV file path, the CSV is parsed and converted to the appropriate VDM types 
    loadCSV: seq1 of char ==> seq of ?
    loadCSV(name) ==
    (let mk_(success', lines) = flinecount(name) in
        (dcl success: bool     := success',
             line   : nat1     := 1,
             result : seq of ? := [];
            (showError();
             while (success and line <= lines) do
                (let mk_(s, r) = freadval[seq of ?](name, line) in
                    (showError();
                     success := s;
                     line    := line + 1;
                     result  := result ^ [r];
                    );
                );
             return result;
            )
        )
    );

    showError: () ==> ()
    showError() ==
    (def err: seq of char = ferror() in
        if len err <> 0 then 
            printf("CSV error %1s", [err]);
    );

end CSV2
