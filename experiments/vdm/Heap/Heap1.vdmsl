-- $Id$
module Heap1

imports from Heap0 types Loc renamed Heap0Loc;
exports all
definitions 

types 
	Free1  = set of Piece
	inv ps == forall p1, p2 in set ps &
					p1 = p2 or 
					locs_of(p1) inter locs_of(p2) = {} or 
					p1.LOC + p1.SIZE <> p2.LOC;

	Piece  :: LOC : Loc
			  SIZE: nat;

	Loc = Heap0Loc;

values 
-- TODO Define values here
functions 
	locs_of : Piece -> set of Loc
	locs_of(p) == {p.LOC,...,p.LOC+p.SIZE-1};

	locs : Free1 -> set of Loc
	locs(ps) == dunion {locs_of(p) | p in set ps };

	retr1_0: Free1 -> set of Loc
	retr1_0(ps) == locs(ps);

state Heap1St of
	free1: Free1 
end 

operations 
	NEW1(req: nat) res: Piece
		ext wr free1
		pre exists p in set free1 & p.SIZE >= req
		post locs(free1) = locs(free1~) \ locs_of(res) and
			 locs_of(res) subset locs(free1~) and
			 res.SIZE = req;

	DISPOSE1(ret: Piece)
		ext wr free1
		pre locs_of(ret) inter locs(free1) = {}
		post locs(free1) = locs(free1~) union locs_of(ret);
end Heap1