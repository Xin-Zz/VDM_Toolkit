-- $Id$
module Heap2

imports from Heap1 types Loc renamed Heap1Loc; 
						 Piece renamed Heap1Piece;
						 Free1 renamed Heap1Free1;
	
				   functions locs_of renamed Heap1locs_of;
exports all

definitions 

types 
	Loc = Heap1Loc;
	Piece = Heap1Piece;
	Free1 = Heap1Free1;

	Free2convenient = set of Piece;

	Free2 = [Fp];

	Fp :: FPLOC: Loc
		  FPSIZE: nat
		  FPNEXT: [Fp];

values 
	ALL_FP : set of Fp = { fp | fp : Fp };

functions 
	isOk2: Free2 -> bool
	isOk2(fp) == if fp = nil then
					true
				 else if fp.FPNEXT = nil then
					true
				 else
					fp.FPLOC + fp.FPSIZE < fp.FPNEXT.FPLOC and isOk2(fp.FPNEXT)
		measure xmeasure_Free2;

	locs2: Free2 -> set of Loc
	locs2(fp) == if fp = nil then
					{}
				 else
					{fp.FPLOC,...,fp.FPLOC+fp.FPSIZE-1} union locs2(fp.FPNEXT)
		measure xmeasure_Free2;

	isReachable: Fp * Free2 -> bool
	isReachable(fp, start) == if start = nil then
								false
							  else if fp = start then
								true
							  else 
								isReachable(fp, start.FPNEXT)
		measure xmeasure_fpFree2;	

	retr2_0: Free2 -> set of Loc
	retr2_0(ps) == locs2(ps);

	retr2_1: Free2 -> Free1
	retr2_1(free) == { mk_Heap1Piece(fp.FPLOC, fp.FPSIZE) | 
							fp in set ALL_FP & isReachable(fp, free) };

	-- inverse of retr2_1: useful to prove adequacy proof
	split(ps: Free1) r: Piece * Free1
		pre ps <> {}
		post let mk_(p, s) = r in
				p in set ps and
				s = ps \ { p } and
				forall q in set s & p.LOC < q.LOC;

	xinv_retr2_1: Free1 -> Free2
	xinv_retr2_1(ps) == if ps = {} then
							nil
						else
							let mk_(p, s) = split(ps) in
								mk_Fp(p.LOC, p.SIZE, xinv_retr2_1(s))
		measure xmeasure_Free1;

	xmeasure_Free1: Free1 -> nat
	xmeasure_Free1(ps) == card ps;

	xmeasure_Free2: Free2 -> nat
	xmeasure_Free2(fp) == if fp = nil or fp.FPNEXT = nil then 0 else 1+xmeasure_Free2(fp.FPNEXT)
		measure xmeasure_unk;

	xmeasure_unk: Free2 -> nat
	xmeasure_unk(fp) == is not yet specified;

	xmeasure_fpFree2: Fp * Free2 -> nat
	xmeasure_fpFree2(fp, f2) == if f2 = nil or fp = f2 then 0 else 1+xmeasure_fpFree2(fp, f2.FPNEXT)
		measure xmeasure_unk2;

	xmeasure_unk2: Fp * Free2 -> nat
	xmeasure_unk2(fp, f2) == is not yet specified;

state Heap2St of
	free2: Free2
end 

operations 
	NEW2(req: nat) res: Piece
		ext wr free2
		pre exists fp in set ALL_FP & fp.FPSIZE >= req and isReachable(fp, free2)
		post locs2(free2) = locs2(free2~) \ Heap1locs_of(res) and
			 Heap1locs_of(res) subset locs2(free2~) and
			 res.SIZE = req;
	
	DISPOSE2(ret: Piece)
		ext wr free2
		pre Heap1locs_of(ret) inter locs2(free2) = {} 	
		post locs2(free2) = locs2(free2~) union Heap1locs_of(ret); 
end Heap2