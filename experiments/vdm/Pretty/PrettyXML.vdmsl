module PrettyXML
imports 
from FastPrettyPrinter
    values 
        Dnil renamed Dnil;
    types 
        DOC renamed DOC;
        String renamed String;
    functions 
        folddoc renamed folddoc;
        doc_concat renamed doc_concat; 
        text renamed text; 
        bracket renamed bracket;
        pretty renamed pretty;
        fill renamed fill;
        words renamed words;
exports 
    functions
        testXML: nat -> String;
definitions 
types 
    XMLElement :: 
        n: String
        a: seq of XMLAttribute
        x: seq of XML;

    XMLText ::
        s: String;

    XMLAttribute ::
        n: String
        v: String;

    XML = XMLElement | XMLText;
    
functions 

    seq_map[@S, @T]: (@S -> @T) * seq of @S -> seq of @T
    seq_map(f, xs) == [ f(xs(i)) | i in set inds xs ];

    --@Warning(5013)
    showXML: XML -> DOC 
    showXML(x) == folddoc(doc_concat, showXMLs(x));

    showXMLs: XML -> seq of DOC
    showXMLs(x) ==
        cases x:
            mk_XMLElement(n, a, []) -> [doc_concat(text("<"), doc_concat(showTag(n, a), text("/>")))],
            mk_XMLElement(n, a, c)  -> [doc_concat(
                                            text("<"), 
                                            doc_concat(
                                                showTag(n, a), 
                                                doc_concat(
                                                    text(">"),
                                                    doc_concat(
                                                        showFill[XML](showXMLs, c),
                                                        doc_concat(
                                                            text("</"),
                                                            doc_concat(
                                                                text(n),
                                                                text(">")
                                                            )
                                                        )
                                                    )
                                                )
                                            )
                                        )],
            mk_XMLText(s)           -> seq_map[String, DOC](text, words(s))
        end;

    showAtts: XMLAttribute -> seq of DOC 
 
    showAtts(mk_XMLAttribute(n, v)) == [doc_concat(text(n), doc_concat(text("="), text(quoted(v))))];

    quoted: String -> String 
    quoted(s) == "\"" ^ s ^ "\"";

    showTag: String * seq of XMLAttribute -> DOC
    showTag(n, a) == doc_concat(text(n), showFill[XMLAttribute](showAtts, a));

    showFill[@T]: (@T -> seq of DOC) * seq of @T -> DOC 
    showFill(f, xs) ==
        if xs = [] then Dnil else bracket("", fill(conc seq_map[@T, seq of DOC](f, xs)), "");

    testXML: nat -> String 
    testXML(w) == pretty(w, showXML(xml));

values

    xml: XML = mk_XMLElement("p", 
        [
            mk_XMLAttribute("color", "red"),
            mk_XMLAttribute("font", "Times"),
            mk_XMLAttribute("size", "10")
        ],
        [
            mk_XMLText("Here is some"),
            mk_XMLElement("em", [], [mk_XMLText("emphasized")]),
            mk_XMLText("text."),
            mk_XMLText("Here is a"),
            mk_XMLElement("a", 
                [mk_XMLAttribute("href", "http://www.eg.com/")], 
                [mk_XMLText("Link")]
            ),
            mk_XMLText("elsewhere")
        ]);

end PrettyXML